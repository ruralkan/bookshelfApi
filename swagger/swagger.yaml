swagger: "2.0"
info:
  version: "0.0.1"
  title: bookShelfApi
# during dev, should point to your local machine
host: localhost:3000
# basePath prefixes all resource paths
basePath: /
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /books:
    # binds a127 app logic to a route
    x-swagger-router-controller: book.controller
    get:
      description: Returns the book collection list
      # used as the method name of the controller
      operationId: fetchAllBooks
      parameters:
        #query filter by keyword /books?keyword=<<keyword>>
        - name: keyword
          in: query
          type: string
          required: false
        # sort returned data by name /books?sort=keyword
        - name: sort
          in: query
          type: string
          required: false
      responses:
        "200":
          description: Success
          schema:
            # a pointer to a definition
            $ref: "#/definitions/FetchAllBooksListResponse"
        # responses may fall through to errors
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      description: add a new book to the collection list
      parameters:
        - in: body
          name: gamesystem
          description: The book to create.
          schema:
            $ref: "#/definitions/Book"
      responses:
        "201":
          description: Success
          schema:
            $ref: "#/definitions/GetBookResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /books/{id}:
    x-swagger-router-controller: book.controller
    get:
      description: get a book
      parameters:
        - name: id
          type: number
          in: path
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetBookResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    put:
      description: update all book's features
      # define the parameters
      parameters:
        - name: id
          description: book id
          type: number
          in: path
          required: true
        - in: body
          name: book
          description: The book to update all features.
          schema:
            $ref: "#/definitions/Book"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetBookResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    patch:
      description: update some book's features
      # define the parameters
      parameters:
        - name: id
          description: book id
          type: number
          in: path
          required: true
        - in: body
          name: book
          description: The book to update some features.
          schema:
            $ref: "#/definitions/Book"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GetBookResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"

    delete:
      description: delete a book
      # define the parameters
      parameters:
        - name: id
          description: book id
          type: number
          in: path
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/GeneralResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
definitions:
  # complex objects have schema definitions
  Book:
    type: object
    properties:
      title:
        type: string
        description: Title of the book
      author:
        type: string
        description: Author of the book
      genre:
        type: string
        description: Literary genre
      description:
        type: string
        description: Description of thebook
      read:
        type: boolean
        description: It is read or not
    required:
      - title
      - author
  GetBookResponse:
    type: object
    properties:
      id:
        type: number
        description: identifier
      title:
        type: string
        description: Title of the book
      author:
        type: string
        description: Author of the book
      genre:
        type: string
        description: Literary genre
      description:
        type: string
        description: Description of thebook
      read:
        type: boolean
        description: It is read or not
      link:
        description: hateoas
        format: uri
        type: string
    required:
      - title
      - author
  FetchAllBooksListResponse:
    required:
      - gamesystems
    properties:
      gamesystems:
        type: array
        items:
          $ref: "#/definitions/GetBookResponse"
  GeneralResponse:
    type: object
    properties:
      success:
        type: number
        description: returns 1 if successful
      description:
        type: string
        description: a short comment
    required:
      - success
      - description
  ErrorResponse:
    required:
      - message
    properties:
      code:
        type: number
      message:
        type: string
      description:
        type: string
